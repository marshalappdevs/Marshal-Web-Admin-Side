#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Bsmh-Marshal:server');
var http = require('http');
var https = require('https');
var config = require('../config/main');
var emitter = require('../config/emitter');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Generate new secret to sign api keys every 12 hours
 */
 
var options = {
  port: 443,
  host: 'api.random.org', 
  path: '/json-rpc/1/invoke',
  method: 'POST',
  headers: {'Content-type': 'application/json-rpc'}
};

var reqBody = '{"jsonrpc": "2.0", "method": "generateStrings","params": {"apiKey": "'+ config.randomApiKey +'","n": '+config.n+', "length": '+config.length+', "characters": "'+config.allChars+'", "replacement": true}, "id": 7589}';

var callback = function(response) {
  var str = ''
  var res;
  response.on('data', function (chunk) {
    str += chunk;
  });

  response.on('end', function () {
    res = JSON.parse(str);
    // Set new secret for generating future tokens
    config.secret = res.result.random.data[0] + res.result.random.data[1];

    // Notify secret change so passport strategies would be reloaded
    emitter.emit('secretChange');
  });
}

// Change secret every now and then
setInterval(function() {
  var req = https.request(options, callback);
  req.write(reqBody);
  req.end();
}, config.changeKeyInterval)

 
